import asyncio
import logging
import os
import uuid
import json
from typing import Optional, Dict, List, Tuple
from tariffs import TARIFFS
from instructions import INSTRUCTIONS
from locales import LOCALES
import aiofiles
from yookassa import Configuration, Payment
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
logging.basicConfig(level=logging.INFO)

class Config:
    TOKEN = os.environ.get("BOT_TOKEN")
    ADMINS = ["725739479", "693411987"]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    SUBSCRIBERS_FILE = "subscribers.txt"
    YOOKASSA_SHOP_ID = int(os.environ.get("YOOKASSA_SHOP_ID", 0))
    YOOKASSA_SECRET_KEY = os.environ.get("YOOKASSA_SECRET_KEY")
    IMAGES_DIR = "images"
    KEYS_DIR = "keys"
    CODES_FILE = "codes.txt"
    STATISTICS_FILE = "statistics.json"  # –§–∞–π–ª –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

# –°–µ—Ä–≤–∏—Å—ã
class CodeManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∫–æ–¥–æ–≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."""
    def __init__(self, key_dir: str, bot: Bot):
        self.key_dir = key_dir
        self.bot = bot

    async def get_code(self, key_file: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –∫–æ–¥–æ–≤ –æ—Å—Ç–∞—ë—Ç—Å—è –º–∞–ª–æ."""
        path = os.path.join(self.key_dir, key_file)
        try:
            async with aiofiles.open(path, mode="r+") as f:
                codes = await f.readlines()
                if not codes:
                    return None
                code = codes[0].strip()
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –∫–æ–¥–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ
                if len(codes) <= 10:
                    await self._notify_admin(key_file, len(codes))
                # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª, —É–¥–∞–ª—è—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
                await f.seek(0)
                await f.truncate()
                await f.writelines(codes[1:])
                return code
        except FileNotFoundError:
            logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
            return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞: {e}")
            return None

    async def check_code_exists(self, key_file: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∫–æ–¥—ã –≤ —Ñ–∞–π–ª–µ."""
        path = os.path.join(self.key_dir, key_file)
        try:
            async with aiofiles.open(path, mode="r") as f:
                content = await f.readlines()
                return bool(content)
        except FileNotFoundError:
            return False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–æ–≤: {e}")
            return False

    async def _notify_admin(self, key_file: str, remaining_codes: int):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏—Ö—Å—è –∫–æ–¥–∞—Ö."""
        message = f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í —Ñ–∞–π–ª–µ {key_file} –æ—Å—Ç–∞–ª–æ—Å—å {remaining_codes} –∫–æ–¥–æ–≤."
        for admin_id in Config.ADMINS:
            try:
                await self.bot.send_message(admin_id, message)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

class PaymentManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ —á–µ—Ä–µ–∑ Yookassa."""
    @staticmethod
    async def create_payment(amount: float, description: str, bot_username: str, user_id: int) -> dict:
        """–°–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Yookassa."""
        Configuration.configure(
            account_id=Config.YOOKASSA_SHOP_ID,
            secret_key=Config.YOOKASSA_SECRET_KEY
        )
        payment = Payment.create({
            "amount": {
                "value": f"{amount:.2f}",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": f"https://t.me/{bot_username}"
            },
            "capture": True,
            "description": description,
            "metadata": {
                "user_id": user_id
            }
        }, uuid.uuid4())
        return payment

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    language = State()
    welcome = State()
    faq = State()
    citizenship = State()
    operator = State()
    tariff = State()
    instruction = State()
    payment = State()
    payment_confirmed = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
def add_subscriber(chat_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç chat_id –≤ —Ñ–∞–π–ª –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â—ë –Ω–µ—Ç."""
    subscribers = set()
    if os.path.exists(Config.SUBSCRIBERS_FILE):
        with open(Config.SUBSCRIBERS_FILE, "r") as f:
            subscribers = set(line.strip() for line in f if line.strip())
    if str(chat_id) not in subscribers:
        with open(Config.SUBSCRIBERS_FILE, "a") as f:
            f.write(f"{chat_id}\n")
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {chat_id}")

def get_subscribers() -> List[int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ chat_id –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(Config.SUBSCRIBERS_FILE):
        return []
    with open(Config.SUBSCRIBERS_FILE, "r") as f:
        return [int(line.strip()) for line in f if line.strip()]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
class TariffBot:
    def __init__(self):
        self.bot = Bot(token=Config.TOKEN)
        self.dp = Dispatcher()
        self.code_manager = CodeManager(Config.KEYS_DIR, self.bot)
        self._register_handlers()
        self.statistics_file = Config.STATISTICS_FILE

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤."""
        self.dp.message.register(self.start, Command("start"))
        self.dp.message.register(self.broadcast, Command("send"))
        self.dp.message.register(self.show_stats, Command("stats"))
        self.dp.callback_query.register(self.process_language, F.data.in_(["ru", "uz", "tj"]))
        self.dp.callback_query.register(self.process_back, F.data.startswith("back:"))
        self.dp.callback_query.register(self.select_tariff, F.data == "select_tariff")
        self.dp.callback_query.register(self.process_citizenship, F.data.startswith("citizen_"))
        self.dp.callback_query.register(self.process_operator, F.data.startswith("operator_"))
        self.dp.callback_query.register(self.process_tariff, F.data.startswith("tariff_"))
        self.dp.callback_query.register(self.process_instruction, F.data == "show_instructions")
        self.dp.callback_query.register(self.process_payment, F.data == "confirm_payment")
        self.dp.callback_query.register(self.process_proceed_payment, F.data == "proceed_to_payment")
        self.dp.callback_query.register(self.show_faq, F.data == "faq")
        self.dp.message.register(self.handle)

    async def start(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        await state.set_state(Form.language)
        add_subscriber(message.chat.id)
        logging.info(f"Start chat id: {message.chat.id}")
        if str(message.chat.id) in Config.ADMINS:
            await message.answer("üëë –ê–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        await message.answer(
            LOCALES["ru"]["choose_language"],
            reply_markup=self._language_keyboard()
        )

    async def handle(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")

    def _language_keyboard(self) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="ru"),
            InlineKeyboardButton(text="üá∫üáø O'zbek", callback_data="uz"),
            InlineKeyboardButton(text="üáπüáØ –¢–æ“∑–∏–∫”£", callback_data="tj")
        )
        return builder.as_markup()

    async def broadcast(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        if str(message.chat.id) not in Config.ADMINS:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /send <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
            return
        broadcast_message = parts[1].strip()
        subscribers = get_subscribers()
        sent = 0
        for chat_id in subscribers:
            try:
                await self.bot.send_message(chat_id, broadcast_message)
                sent += 1
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

    async def process_language(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
        lang = callback.data
        await state.update_data(lang=lang)
        await state.set_state(Form.welcome)
        await callback.message.edit_text(
            LOCALES[lang]["welcome"],
            reply_markup=self._welcome_keyboard(lang)
        )

    async def show_faq(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ FAQ."""
        builder = InlineKeyboardBuilder()
        data = await state.get_data()
        lang = data.get("lang", 'ru')
        await state.set_state(Form.faq)
        builder.row(
            InlineKeyboardButton(
                text=LOCALES[lang]["back"],
                callback_data="back:welcome"
            )
        )
        await callback.message.edit_text(
            LOCALES[lang]["questions"],
            reply_markup=builder.as_markup()
        )

    def _welcome_keyboard(self, lang: str) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text=LOCALES[lang].get("select_tariff", "‚úÖ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ"),
                callback_data="select_tariff"
            ),
            InlineKeyboardButton(
                text=LOCALES[lang].get("faq", "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"),
                callback_data="faq"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text=LOCALES[lang]["back"],
                callback_data="back:language"
            )
        )
        return builder.as_markup()

    def _citizenship_keyboard(self, lang: str) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞."""
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="üá∑üá∫ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–§" if lang == "ru" 
                     else "üá∑üá∫ Rossiya fuqarosi" if lang == "uz" 
                     else "üá∑üá∫ –†—É—Å–∏—è —à–∞“≥—Ä–≤–æ–Ω–¥–∏",
                callback_data="citizen_ru"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="üåç –ò–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü" if lang == "ru" 
                     else "üåç Chet el fuqarosi" if lang == "uz" 
                     else "üåç –•–æ—Ä–∏“∑”£",
                callback_data="citizen_foreign"
            )
        )
        return builder.as_markup()

    async def process_citizenship(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞."""
        await state.update_data(citizenship=callback.data)
        await state.set_state(Form.operator)
        data = await state.get_data()
        lang = data.get("lang", "ru")
        data = await state.get_data()
        await callback.message.edit_text(
            LOCALES[lang]["choose_operator"],
            reply_markup=self._operator_keyboard(lang, callback.data)
        )

    def _operator_keyboard(self, lang: str, citizen: str) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."""
        builder = InlineKeyboardBuilder()
        operators = ["megafon", "tele2", "mts", "biline", "yota", "sbermobile"] if citizen == "citizen_ru" else ["sbermobile"]
        for op in operators:
            if op in TARIFFS:
                if op == "sbermobile":
                    builder.button(
                        text=op.capitalize() + " | –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                        callback_data=f"operator_{op}"
                    )
                else:
                    builder.button(
                        text=op.capitalize(),
                        callback_data=f"operator_{op}"
                    )
        builder.button(
            text=LOCALES[lang]["back"],
            callback_data="back:citizenship"
        )
        builder.adjust(2)
        return builder.as_markup()

    async def process_operator(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."""
        operator = callback.data.split("_")[1]
        await state.update_data(operator=operator)
        await state.set_state(Form.tariff)
        data = await state.get_data()
        lang = data.get("lang", "ru")
        reply_markup = await self._tariff_keyboard(operator, lang)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = LOCALES[lang]["choose_tariff"].format(oper=operator.capitalize())
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            operator_images = [
                img for img in os.listdir(Config.IMAGES_DIR)
                if img.startswith(f"operator_{operator}") and img.endswith((".jpg", ".jpeg", ".png"))
            ]
            
            if operator_images:
                # –°–æ–∑–¥–∞—ë–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                media_group = []
                for img in operator_images:
                    image_path = os.path.join(Config.IMAGES_DIR, img)
                    media_group.append(types.InputMediaPhoto(
                        media=FSInputFile(image_path)
                    ))
                
                await callback.message.delete()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                await callback.message.answer_media_group(media_group)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                await callback.message.answer(text, reply_markup=reply_markup)
            else:
                # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                logging.warning(f"–ö–∞—Ä—Ç–∏–Ω–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {operator}")
                await callback.message.answer(text, reply_markup=reply_markup)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
            await callback.message.answer(text, reply_markup=reply_markup)

    async def _tariff_keyboard(self, operator: str, lang: str) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞."""
        builder = InlineKeyboardBuilder()
        for tariff in TARIFFS.get(operator, []):
            if not await self.code_manager.check_code_exists(tariff["activation_key_path"]):
                continue
            builder.button(
                text=f"{tariff['price']}‚ÇΩ | {tariff['name']}",
                callback_data=f"tariff_{tariff['id']}"
            )
        builder.button(
            text=LOCALES[lang]["back"],
            callback_data="back:operator"
        )
        builder.adjust(1)
        return builder.as_markup()

    async def process_back(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É."""
        data = await state.get_data()
        lang = data.get("lang", "ru")
        try:
            target_state = callback.data.split(":")[1]
            new_state = None
            text = ""
            keyboard = None

            if target_state == "language":
                new_state = Form.language
                text = LOCALES[lang]["choose_language"]
                keyboard = self._language_keyboard()
            elif target_state == "welcome":
                new_state = Form.welcome
                text = LOCALES[lang]["welcome"]
                keyboard = self._welcome_keyboard(lang)
            elif target_state == "citizenship":
                new_state = Form.citizenship
                text = LOCALES[lang]["choose_citizenship"]
                keyboard = self._citizenship_keyboard(lang)
            elif target_state == "operator":
                new_state = Form.operator
                text = LOCALES[lang]["choose_operator"]
                keyboard = self._operator_keyboard(lang, data.get('citizenship', 'citizen_ru'))
            elif target_state == "tariff":
                new_state = Form.tariff
                text = LOCALES[lang]["choose_tariff"].format(oper=data.get("operator", "mts").capitalize())
                keyboard = await self._tariff_keyboard(data.get("operator", "mts"), lang)
            elif target_state == "instruction":
                new_state = Form.instruction
                if data.get("operator", "sbermobile") == 'sbermobile':
                    text = INSTRUCTIONS[data.get('citizenship', 'citizen_ru')][lang]['sbermobile']
                else:
                    text = INSTRUCTIONS[data.get('citizenship', 'citizen_ru')][lang]['text']
                keyboard = self._instruction_keyboard(lang)
            elif target_state == "payment":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞
                if await state.get_state() == Form.payment_confirmed:
                    await callback.answer("–û–ø–ª–∞—Ç–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –∫–æ–¥ —É–∂–µ –±—ã–ª –≤—ã–¥–∞–Ω.", show_alert=True)
                    return
                new_state = Form.payment
                text = LOCALES[lang]["payment"]
                keyboard = self._payment_keyboard("", lang, "")
            else:
                await callback.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è")
                return

            await state.set_state(new_state)
            await callback.message.delete()
            await callback.message.answer(text, reply_markup=keyboard)
        except Exception as e:
            logging.error(f"Error in process_back: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ")

    async def select_tariff(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞."""
        await state.set_state(Form.citizenship)
        data = await state.get_data()
        lang = data.get("lang", "ru")
        await callback.message.answer(
            LOCALES[lang]["choose_citizenship"],
            reply_markup=self._citizenship_keyboard(lang)
        )

    async def process_tariff(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞."""
        tariff_id = callback.data.split("_")[1]
        data = await state.get_data()
        operator = data.get('operator', 'mts')
        lang = data.get('lang', 'ru')
        tariff = next(t for t in TARIFFS[operator] if t["id"] == tariff_id)
        await state.update_data(tariff=tariff)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
        description_text = LOCALES[lang]["tariff_disc"].format(
            tariff_name=tariff.get('name'),
            tariff_price=tariff.get('price'),
            tariff_discription=tariff.get('description')
        )
        callback.message.delete()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Ç–∞—Ä–∏—Ñ–∞
            if 'pic' in tariff:
                image_path = os.path.join(Config.IMAGES_DIR, tariff['pic'])
                if os.path.exists(image_path):
                    await callback.message.delete()
                    await callback.message.answer_photo(
                        FSInputFile(image_path),
                        caption=description_text,
                        reply_markup=self._sber_tariff_details_keyboard(lang) if operator == "sbermobile" else self._tariff_details_keyboard(lang)
                    )
                else:
                    # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    logging.warning(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {image_path}")
                    await callback.message.edit_text(
                        description_text,
                        reply_markup=self._sber_tariff_details_keyboard(lang) if operator == "sbermobile" else self._tariff_details_keyboard(lang)
                    )
            else:
                # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await callback.message.edit_text(
                    description_text,
                    reply_markup=self._sber_tariff_details_keyboard(lang) if operator == "sbermobile" else self._tariff_details_keyboard(lang)
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        
        await state.set_state(Form.instruction)

    def _tariff_details_keyboard(self, lang: str) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ç–∞—Ä–∏—Ñ–∞."""
        builder = InlineKeyboardBuilder()
        builder.button(
            text=LOCALES[lang].get("accept_terms", "‚úÖ 199—Ä"),
            callback_data="show_instructions"
        )
        builder.button(
            text=LOCALES[lang].get("free", "ü§ë –•–æ—á—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ"),
            callback_data="operator_sbermobile"
        )
        builder.button(
            text=LOCALES[lang]["back"],
            callback_data="back:tariff"
        )
        builder.adjust(1)
        return builder.as_markup()
    
    def _sber_tariff_details_keyboard(self, lang: str) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ç–∞—Ä–∏—Ñ–∞ Sbermobile."""
        builder = InlineKeyboardBuilder()
        builder.button(
            text=LOCALES[lang].get("promo", "‚úÖ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ"),
            callback_data="show_instructions"
        )
        builder.button(
            text=LOCALES[lang]["back"],
            callback_data="back:tariff"
        )
        builder.adjust(1)
        return builder.as_markup()

    def _instruction_keyboard(self, lang: str) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π."""
        builder = InlineKeyboardBuilder()
        builder.button(
            text=LOCALES[lang].get("accept_terms", "‚úÖ 199—Ä"),
            callback_data="show_instructions"
        )
        builder.button(
            text=LOCALES[lang]["back"],
            callback_data="back:tariff"
        )
        builder.adjust(1)
        return builder.as_markup()

    async def process_instruction(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π."""
        data = await state.get_data()
        tariff = data.get("tariff")
        oper = data.get("operator", 'mts')
        lang = data.get('lang', 'ru')
        image_path = os.path.join(Config.IMAGES_DIR, tariff.get("image"))
        link_app = ""
        offices = ""
        if oper == "megafon":
            link_app = "https://moscow.megafon.ru/help/lk/"
            offices = " https://megafon.ru/help/offices/ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö –≤—ã–±–µ—Ä–∏—Ç–µ \"–ó–∞–º–µ–Ω–∞ SIM –¥—Ä—É–≥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞\""
        elif oper == "tele2":
            link_app = "https://msk.t2.ru/promo/mytele2"
            offices = "https://t2.ru/offices –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö –≤—ã–±–µ—Ä–∏—Ç–µ \"–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\""
        elif oper == "mts":
            link_app = "https://mymts.ru/"
            offices = "https://mts.ru/personal/podderzhka/zoni-obsluzhivaniya/offices/ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö –≤—ã–±–µ—Ä–∏—Ç–µ \"–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ú–¢–° –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º —Ç–∞—Ä–∏—Ñ–æ–º\""
        if oper == "sbermobile":
            text = "sbermobile"
        else:
            text = "text"
        try:
            if os.path.exists(image_path):
                await callback.message.delete()
                await callback.message.answer_photo(
                    FSInputFile(image_path),
                    caption=INSTRUCTIONS[data.get('citizenship', 'citizen_ru')][lang][text] + "\n\n–°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞\n" +  link_app + "\n–ù–∞–π–¥–∏—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π –æ—Ñ–∏—Å\n" + offices,
                    reply_markup=self._payment_instruction_keyboard(lang, oper)
                )
            else:
                await callback.message.edit_text(INSTRUCTIONS[data.get('citizenship', 'citizen_ru')][lang][text] + "\n\n–°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞\n" +  link_app + "\n–ù–∞–π–¥–∏—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π –æ—Ñ–∏—Å\n" + offices, reply_markup=self._payment_instruction_keyboard(lang, oper))
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await state.set_state(Form.payment)

    def _payment_instruction_keyboard(self, lang: str, oper: str) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –æ–ø–ª–∞—Ç–µ."""
        builder = InlineKeyboardBuilder()
        if oper == "sbermobile":
            builder.button(
                text=LOCALES[lang]['promo'],
                callback_data="confirm_payment"
            )
        else:
            builder.button(
                text=LOCALES[lang]['pay_button'],
                callback_data="proceed_to_payment"
            )
        builder.button(
            text=LOCALES[lang]["back"],
            callback_data="back:tariff"
        )
        builder.adjust(1)
        return builder.as_markup()

    async def process_proceed_payment(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ."""
        data = await state.get_data()
        tariff = data.get("tariff")
        user = callback.from_user
        try:
            me = await self.bot.get_me()
            payment = await PaymentManager.create_payment(
                amount=199,
                description=f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff['name']}",
                bot_username=me.username,
                user_id=user.id
            )
            await state.update_data(
                payment_id=payment.id,
                tariff_id=tariff["id"],
                user_id=user.id
            )
            await callback.message.edit_reply_markup(
                reply_markup=self._payment_keyboard(
                    payment.confirmation.confirmation_url,
                    data.get('lang', 'ru'),
                    tariff["id"]
                )
            )
            await state.set_state(Form.payment)
        except Exception as e:
            logging.error(f"Payment creation error: {str(e)}")
            await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
    
    def _payment_keyboard(self, payment_link: str, lang: str, tariff_id: str) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã."""
        builder = InlineKeyboardBuilder()
        builder.button(
            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å" if lang == "ru" else "üí≥ To'lov" if lang == "uz" else "üí≥ –ü–∞—Ä–¥–æ—Ö—Ç",
            url=payment_link
        )
        builder.button(
            text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É" if lang == "ru" else "‚úÖ To'lovni tekshirish" if lang == "uz" else "‚úÖ –ü–∞—Ä–¥–æ—Ö—Ç—Ä–æ —Ç–∞—Ñ—Ç–∏—à –∫—É–Ω–µ–¥",
            callback_data="confirm_payment"
        )
        builder.button(
            text=LOCALES[lang]["back"],
            callback_data="back:tariff"
        )
        builder.adjust(1)
        return builder.as_markup()
    
    async def process_payment(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."""
        data = await state.get_data()
        lang = data.get("lang", "ru")
        tariff = data.get("tariff")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞
        if await state.get_state() == Form.payment_confirmed:
            await callback.answer("–û–ø–ª–∞—Ç–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –∫–æ–¥ —É–∂–µ –±—ã–ª –≤—ã–¥–∞–Ω.", show_alert=True)
            return

        try:
            if data.get("operator", "megafon") != "sbermobile":
                payment = Payment.find_one(data["payment_id"])
                if payment.status != "succeeded":
                    await callback.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω", show_alert=True)
                    return
                if not tariff:
                    raise ValueError("Tariff data not found")
                codeM = await self.code_manager.get_code(tariff["activation_key_path"])
                code = codeM.split(":")[0]
                number = codeM.split(":")[1]
            else:
                if data.get("citizenship", "citizen_ru") == "citizen_ru":
                    code = "good51"
                else:
                    code = "good52"
                number = "‚ùå"
            if code:
                await callback.message.edit_reply_markup(
                    reply_markup=None
                )
                await self._update_statistics(tariff["id"], data.get("operator", "mts"), callback.from_user.id)
                full_text = LOCALES[lang]["payment_success"].format(
                    code=code,
                    number=number,
                    tariff_name=tariff['name'],
                    tariff_price=tariff['price']
                )
                await callback.message.answer(
                    full_text,
                    parse_mode="HTML",
                    reply_markup=self._restart_keyboard(lang)
                )
                if data.get("operator", "megafon") == "tele2":
                    if lang == 'tj':
                        suptext = "–ë–∞—Ä–æ–∏ —Ñ–∞—ä–æ–ª—Å–æ–∑–∏–∏ –ø—É—Ä—Ä–∞–∏ —Ä–∞“õ–∞–º –±–∞ –¥–∞—Å—Ç–≥–∏—Ä”£ –Ω–∞–≤–∏—Å–µ–¥ (@stan359)"
                    elif lang == "uz":
                        suptext = "Raqamni to'liq faollashtirish uchun (@stan359) qo'llab-quvvatlang"
                    else:
                        suptext = "–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (@stan359) –¥–ª—è –ø–æ–ª–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞"
                    await callback.message.answer(suptext)
                    await self.bot.send_message(chat_id="693411987", text=f"–ö—É–ø–ª–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ2.\n–ö–æ–¥: {code}\n–ù–æ–º–µ—Ä: {number}")
            else:
                error_text = LOCALES[lang].get("no_codes_error", "‚ùå –ö–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")
                await callback.answer(error_text, show_alert=True)
                await self._show_tariff_list(callback, data)
        except Exception as e:
            logging.error(f"Payment processing error: {e}")
            error_text = LOCALES[lang].get("payment_error", "‚õî –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
            await callback.answer(error_text, show_alert=True)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
        await state.set_state(Form.payment_confirmed)

    def _restart_keyboard(self, lang: str) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."""
        builder = InlineKeyboardBuilder()
        builder.button(
            text=LOCALES[lang]['restart'],
            callback_data="back:tariff"
        )
        builder.adjust(1)
        return builder.as_markup()

    async def _show_tariff_list(self, callback: CallbackQuery, data: dict):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤."""
        await callback.message.edit_text(
            LOCALES[data.get("lang", "ru")]["choose_tariff"].format(oper=data.get('operator', 'mts').capitalize()),
            reply_markup=await self._tariff_keyboard(
                data.get('operator', 'mts'), 
                data.get('lang', 'ru')
            )
        )

    async def _update_statistics(self, tariff_id: str, operator: str, user_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—É–ø–æ–∫."""
        try:
            if not os.path.exists(self.statistics_file):
                stats = {}
            else:
                async with aiofiles.open(self.statistics_file, "r") as f:
                    content = await f.read()
                    stats = json.loads(content) if content else {}

            if tariff_id not in stats:
                stats[tariff_id] = {
                    "operator": operator,
                    "purchase_count": 0,
                    "users": []
                }

            stats[tariff_id]["purchase_count"] += 1
            if user_id not in stats[tariff_id]["users"]:
                stats[tariff_id]["users"].append(user_id)

            async with aiofiles.open(self.statistics_file, "w") as f:
                await f.write(json.dumps(stats, indent=2))

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def show_stats(self, message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—É–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
        if str(message.chat.id) not in Config.ADMINS:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        statistics = await self.get_statistics()
        if not statistics:
            await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫:\n\n"
        for tariff_id, data in statistics.items():
            stats_text += (
                f"–¢–∞—Ä–∏—Ñ: {tariff_id}\n"
                f"–û–ø–µ—Ä–∞—Ç–æ—Ä: {data['operator']}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {data['purchase_count']}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(data['users'])}\n\n"
            )

        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ
        most_popular = await self.get_most_popular_tariff()
        if most_popular:
            stats_text += f"–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ: {most_popular[0]} (–ø–æ–∫—É–ø–æ–∫: {most_popular[1]['purchase_count']})"

        await message.answer(stats_text)

    async def get_statistics(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—É–ø–æ–∫."""
        try:
            if os.path.exists(self.statistics_file):
                with open(self.statistics_file, "r", encoding="utf-8") as f:
                    statistics = json.load(f)
                return statistics
            else:
                return {}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

    async def get_most_popular_tariff(self) -> Optional[Tuple[str, Dict]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ."""
        statistics = await self.get_statistics()
        if not statistics:
            return None

        most_popular_tariff_id = max(
            statistics.keys(),
            key=lambda x: statistics[x]["purchase_count"]
        )
        return most_popular_tariff_id, statistics[most_popular_tariff_id]

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    bot_instance = TariffBot()
    await bot_instance.dp.start_polling(bot_instance.bot)

if __name__ == "__main__":
    asyncio.run(main())